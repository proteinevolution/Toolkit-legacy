#! /usr/bin/perl -w
#
# Ancescon Tree Normalizer - Utility Class to extract all data from an HHR file
# Usage  : treenormalizer.pl -n <names File> -t <treefile> [-v] <int> [-nl] <int>
# Author : Joern Marialke, Seung-Zin Nam & Klaus Faidt MPI Ebio 2014


use strict;

my $usage = "Normalize optional treefiles
Usage  : treenormalizer.pl -n <names File> -t <treefile>

Options:
       -n <names File>	Names File generated by Ancescon
       -t <treefile>	Tree File generated by Ancescon
       [-v] <int>		Verbose mode = 1, Debug = 2
       [-nl] <int>      Name Length, default = 30
\n";

# Global variable declaration
my $options;
my $namefile;				# File containing the Sequence to name Mapping
my $treefile;				# File containing the tree data with the sequences
my $v = 0;					# Set Verbose mode 0 = nothing, 1 = verbose, 2 = debug
my $nl = 30;				# Name Length default is 30

my %nameSequenceMap =();
my $treedata ="";

# Processing command line options
if (@ARGV<1) {die $usage;}
for (my $i=0; $i<@ARGV; $i++) {$options.=" $ARGV[$i] ";}

# Set options
if ($options=~s/ -n\s+(\S+) / /g)		{$namefile=$1;}
if ($options=~s/ -t\s+(\S+) / /g)		{$treefile=$1;}
if ($options=~s/ -v\s+(\d+) / /g)		{$v=$1;}
if ($options=~s/ -nl\s+(\d+) / /g)		{$nl=$1;}

&load_names();
&load_tree();
&replace_names();

#########################################################################################
# load_names
# Load the name sequence data and push it into the %nameSequenceMap
#
#########################################################################################
sub load_names(){
	if($v>0){print "Loading Sequence Name Pairs\n"};
	# Init local variables
	my $line;


	open (INFILE, "<$namefile") || die "Error loading name File: Couldn't open $namefile: $!\n";
	while ($line=<INFILE>) {
		#Init loop variables, only alive in one cycle
		my $real_name;

		if($v==2){print $line};

		$line=~/(Sequence\d+)\s+(.*)/;
		if(length($2)>$nl){
			$real_name= $2;
		}else{
			$real_name= $2;
		}
		if($v==2){print $1." => ".$real_name."\n"};

		$nameSequenceMap{$1} =$real_name;

	}
	close(INFILE);

  %nameSequenceMap = reverse %nameSequenceMap;
}

#########################################################################################
# load_tree
# Load the tree data and store it in String
#
#########################################################################################
sub load_tree(){
	if($v>0){print "Loading Tree Data\n"};

	# Init local variables
	my $line;

	open (INFILE, "<$treefile") || die "Error loading name File: Couldn't open $treefile: $!\n";
	while ($line=<INFILE>) {
		$treedata= $treedata.$line;
	}
	close(INFILE);


}

#########################################################################################
# replace_names
# Replace the sequenceN with the real names
#
#########################################################################################
sub replace_names(){
	if($v>0){print "Replacing Names in Tree Data\n"};

	# init local vars
	my @nameSequence_keys= keys(%nameSequenceMap);

	# For each Sequence: replace with
	foreach my $key ( @nameSequence_keys ){

	 	#Match our SequenceN to (SequenceN:
	 	if($treedata=~ /\Q$key:\E/ ){
	 		$treedata=~ s/\Q$key:\E/$nameSequenceMap{$key}:/;
	 		#print $key." - ".$nameSequenceMap{$key}."\n";
	 	}

	}

	open(OUTFILE,">$treefile") || die "Cannot write to $treefile\n";
		print OUTFILE $treedata;
	close(OUTFILE);
}
